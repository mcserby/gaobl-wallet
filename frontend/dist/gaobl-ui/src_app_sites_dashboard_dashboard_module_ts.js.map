{"version":3,"file":"src_app_sites_dashboard_dashboard_module_ts.js","mappings":"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","sources":["./src/app/sites/dashboard/dashboard.component.ts","./src/app/sites/dashboard/dashboard.component.html","./src/app/sites/dashboard/dashboard.module.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {SharedDataService} from '../../services/shared-data.service';\nimport {SignWalletResponse} from '../../models/wallet.model';\nimport {Router} from \"@angular/router\";\nimport {CreateWalletResponse} from \"../../models/blockchain.model\";\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  transactionFormGroup = this.formBuilder.group({\n    senderWalletId: ['', Validators.required],\n    recipientWalletId: ['', Validators.required],\n    amount: ['', Validators.required]\n  });\n\n  constructor(\n    private readonly formBuilder: FormBuilder,\n    private readonly router: Router,\n    private readonly httpClient: HttpClient\n  ) { }\n\n  ngOnInit(): void {\n    if (SharedDataService.privateKey === '') {\n      this.router.navigate(['/login']).then();\n    }\n  }\n\n  sendTransaction(): void {\n    const privateKey = SharedDataService.privateKey;\n    const senderWalletId = this.transactionFormGroup.get('senderWalletId')?.value;\n    const recipientWalletId = this.transactionFormGroup.get('recipientWalletId')?.value;\n    const amount = this.transactionFormGroup.get('amount')?.value;\n    if (privateKey && senderWalletId && recipientWalletId && amount) {\n      this.httpClient.post<SignWalletResponse>('http://localhost:8080/signTransaction', {\n        message: {\n          senderWalletId: senderWalletId,\n          receiverWalletId: recipientWalletId,\n          amount: amount\n        },\n        privateKey: privateKey\n      }).subscribe((response: SignWalletResponse) => {\n        const userSignature = response.signature;\n        if (userSignature) {\n          this.httpClient.get<CreateWalletResponse>(`http://localhost:26657/broadcast_tx_commit?tx=\\\"send-coins={\\\\\\\"signature\\\\\\\":\\\\\\\"${encodeURIComponent(userSignature)}\\\\\\\",\\\\\\\"coinTransaction\\\\\\\":{\\\\\\\"senderWalletId\\\\\\\":\\\\\\\"${senderWalletId}\\\\\\\",\\\\\\\"receiverWalletId\\\\\\\":\\\\\\\"${recipientWalletId}\\\\\\\",\\\\\\\"amount\\\\\\\":${amount}}}\\\"`)\n            .subscribe((walletResponse: CreateWalletResponse) => {\n              const checkCode = walletResponse.result.check_tx.code;\n              const deliverCode = walletResponse.result.deliver_tx.code;\n              if (checkCode === 0 && deliverCode === 0) {\n                alert('Transaction was successfully executed!');\n              } else {\n                alert('Transaction failed to execute!');\n              }\n            });\n        }\n      });\n    }\n  }\n}\n","<div class=\"center-full\">\n  <h1>{{'wallet.doTransaction.title' | translate}}</h1>\n  <form class=\"form\" [formGroup]=\"transactionFormGroup\" (ngSubmit)=\"sendTransaction()\">\n    <mat-form-field class=\"full-width\" appearance=\"fill\">\n      <mat-label>{{'label.senderWalletId' | translate}}</mat-label>\n      <input matInput formControlName=\"senderWalletId\" required type=\"text\">\n    </mat-form-field>\n\n    <mat-form-field class=\"full-width\" appearance=\"fill\">\n      <mat-label>{{'label.receiverWalletId' | translate}}</mat-label>\n      <input matInput formControlName=\"recipientWalletId\" required type=\"text\">\n    </mat-form-field>\n\n    <mat-form-field class=\"full-width\" appearance=\"fill\">\n      <mat-label>{{'label.amount' | translate}}</mat-label>\n      <input matInput formControlName=\"amount\" required type=\"number\">\n    </mat-form-field>\n\n    <button mat-flat-button color=\"primary\" type=\"submit\" [disabled]=\"transactionFormGroup.invalid\">\n      {{'transaction.save' | translate}}\n    </button>\n  </form>\n</div>\n","import { NgModule } from '@angular/core';\nimport {DashboardComponent} from './dashboard.component';\nimport {RouterModule} from '@angular/router';\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {MatButtonModule} from \"@angular/material/button\";\n\n@NgModule({\n  declarations: [\n    DashboardComponent\n  ],\n  imports: [\n    RouterModule.forChild([{\n      path: '', component: DashboardComponent\n    }]),\n    TranslateModule,\n    MatFormFieldModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    MatButtonModule\n  ],\n  providers: [],\n  bootstrap: []\n})\nexport class DashboardModule { }\n"],"names":[],"sourceRoot":"webpack:///"}